// ==UserScript==
// @name          16ËøõÂà∂È¢úËâ≤È¢ÑËßà‰∏éÊü•ËØ¢Â∑•ÂÖ∑
// @namespace     https://viayoo.com/
// @version       2.7.3.1
// @description   Êèê‰æõ16ËøõÂà∂È¢úËâ≤È¢ÑËßà„ÄÅË∞ÉËØïÂèäÂÖ®ÁΩëÂ∏∏ËßÅÈ¢úËâ≤Â±ïÁ§∫„ÄÇÊîØÊåÅÂçïËâ≤ÂíåÂèåËâ≤È¢ÑËßàÔºåÈ¢úËâ≤ÊåâÂàÜÁªÑÊéíÂ∫è„ÄÇ
// @author        ÊòØÂ∞èÁôΩÂëÄ
// @match         *://*/*
// @license       MIT
// @grant         GM_registerMenuCommand
// @grant         GM_setClipboard
// @run-at        document-end
// ==/UserScript==

(function() {
    'use strict';

    // ========== È¢úËâ≤ÂàÜÁªÑÊï∞ÊçÆ ==========
    const colorGroups = [
        {
            group: "Á∫¢Ëâ≤ üî¥",
            colors: [
                { code: "#FF0000", name: "Á∫¢Ëâ≤" },
                { code: "#DC143C", name: "Áå©Á∫¢" },
                { code: "#B22222", name: "ÁÅ´Á†ñÁ∫¢" },
                { code: "#8B0000", name: "Ê∑±Á∫¢" },
                { code: "#FF4500", name: "Ê©ôÁ∫¢" },
                { code: "#FF6347", name: "Áï™ËåÑÁ∫¢" },
                { code: "#CD5C5C", name: "Âç∞Â∫¶Á∫¢" },
                { code: "#FF6B6B", name: "ÊµÖÁèäÁëöÁ∫¢" },
                { code: "#E32636", name: "ËåúÁ∫¢" }
            ]
        },
        {
            group: "Á≤âËâ≤Á≥ª üíó",
            colors: [
                { code: "#FFC0CB", name: "Á≤âËâ≤" },
                { code: "#F7CAC9", name: "Ê®±Ëä±Á≤â" },
                { code: "#FFB6C1", name: "ÊµÖÁ≤âËâ≤" },
                { code: "#FF69B4", name: "ÁÉ≠ÊÉÖÁ≤â" },
                { code: "#FF1493", name: "Ê∑±Á≤â" },
                { code: "#C71585", name: "‰∏≠Á¥´Á∫¢" },
                { code: "#DB7093", name: "Ê∑°Áé´Áë∞Ëâ≤" },
                { code: "#FF007F", name: "Áé´Áë∞Á∫¢" },
                { code: "#FA8072", name: "È≤ëÈ±ºÁ≤â" },
                { code: "#B0C7E2", name: "ÁÅ∞ÈõæËìùÁ≤â" },
                { code: "#FF99CC", name: "Ê≥°Ê≥°Á≥ñÁ≤â" },
                { code: "#FF77FF", name: "ÈúìËôπÁ≤â" }
            ]
        },
        {
            group: "Ê©ôËâ≤ üü†",
            colors: [
                { code: "#FFA500", name: "Ê©ôËâ≤" },
                { code: "#FF8C00", name: "Ê∑±Ê©ô" },
                { code: "#FF7F50", name: "ÁèäÁëöÊ©ô" },
                { code: "#FFA07A", name: "ÊµÖÊ©ô" },
                { code: "#FFDAB9", name: "Ê°ÉÊ©ô" },
                { code: "#FF8243", name: "ËäíÊûúÊ©ô" }
            ]
        },
        {
            group: "ÈªÑËâ≤ üü°",
            colors: [
                { code: "#FFFF00", name: "ÈªÑËâ≤" },
                { code: "#FFD700", name: "ÈáëÈªÑ" },
                { code: "#FFFFE0", name: "ÊµÖÈªÑËâ≤" },
                { code: "#FFFACD", name: "Êü†Ê™¨Áª∏" },
                { code: "#F0E68C", name: "Âç°ÂÖ∂Ëâ≤" },
                { code: "#FFE4B5", name: "ÈπøÁöÆËâ≤" },
                { code: "#FFDAB9", name: "Ê°ÉËâ≤" },
                { code: "#FADA5E", name: "ÁéâÁ±≥ÈªÑ" },
                { code: "#FFDB58", name: "Ëä•Êú´ÈªÑ" }
            ]
        },
        {
            group: "ÁªøËâ≤ üü¢",
            colors: [
                { code: "#008000", name: "ÁªøËâ≤" },
                { code: "#00FF00", name: "ÈÖ∏Ê©ôÁªø" },
                { code: "#228B22", name: "Ê£ÆÊûóÁªø" },
                { code: "#98FB98", name: "ËãçÁªøËâ≤" },
                { code: "#90EE90", name: "Ê∑°ÁªøËâ≤" },
                { code: "#3CB371", name: "Êµ∑Ê¥ãÁªø" },
                { code: "#2E8B57", name: "Êµ∑Áªø" },
                { code: "#006400", name: "Ê∑±ÁªøËâ≤" },
                { code: "#00FF7F", name: "Êò•Áªø" },
                { code: "#C7EDCC", name: "Ë±ÜÊ≤ôÁªø" },
                { code: "#32CD32", name: "ÈÖ∏Ê©ôÁªø (LimeGreen)" },
                { code: "#9ACD32", name: "ÈªÑÁªø" },
                { code: "#556B2F", name: "Ê©ÑÊ¶ÑÁªø" }
            ]
        },
        {
            group: "ÈùíËâ≤ üîµ",
            colors: [
                { code: "#00FFFF", name: "ÈùíËâ≤" },
                { code: "#E0FFFF", name: "Ê∑°ÈùíËâ≤" },
                { code: "#40E0D0", name: "ÁªøÊùæÁü≥" },
                { code: "#48D1CC", name: "‰∏≠ÁªøÊùæÁü≥" },
                { code: "#00CED1", name: "ÊöóÁªøÊùæÁü≥" },
                { code: "#7FFFD4", name: "Ê∞¥ÁªøÂÆùÁü≥" },
                { code: "#AFEEEE", name: "Á¢ßÁªøËâ≤" },
                { code: "#00FFEF", name: "ÁîµÈùíËâ≤" },
                { code: "#20B2AA", name: "ÊµÖÊµ∑Ê¥ãÁªø" }
            ]
        },
        {
            group: "ËìùËâ≤ üî∑",
            colors: [
                { code: "#0000FF", name: "ËìùËâ≤" },
                { code: "#4169E1", name: "ÁöáÂÆ∂Ëìù" },
                { code: "#1E90FF", name: "ÈÅìÂ•áËìù" },
                { code: "#00BFFF", name: "Ê∑±Â§©Ëìù" },
                { code: "#87CEEB", name: "Â§©Ëìù" },
                { code: "#87CEFA", name: "Ê∑°Â§©Ëìù" },
                { code: "#4682B4", name: "Èí¢Ëìù" },
                { code: "#ADD8E6", name: "Ê∑°ËìùËâ≤" },
                { code: "#B0E0E6", name: "Á≤âËìù" },
                { code: "#191970", name: "ÂçàÂ§úËìù" },
                { code: "#000080", name: "ËóèÈùíËâ≤" },
                { code: "#6A5ACD", name: "Áü≥ÊùøËìù" },
                { code: "#7B68EE", name: "‰∏≠Áü≥ÊùøËìù" }
            ]
        },
        {
            group: "Á¥´Ëâ≤ üü£",
            colors: [
                { code: "#800080", name: "Á¥´Ëâ≤" },
                { code: "#EE82EE", name: "Á¥´ÁΩóÂÖ∞" },
                { code: "#DA70D6", name: "ÂÖ∞Ëä±Á¥´" },
                { code: "#DDA0DD", name: "ÊùéÂ≠êÁ¥´" },
                { code: "#9370DB", name: "‰∏≠Á¥´" },
                { code: "#8A2BE2", name: "ËìùÁ¥´Ëâ≤" },
                { code: "#9400D3", name: "Ê∑±Á¥´ÁΩóÂÖ∞" },
                { code: "#9932CC", name: "ÊöóÂÖ∞Ëä±Á¥´" },
                { code: "#8B008B", name: "ÊöóÂìÅÁ∫¢" },
                { code: "#4B0082", name: "ÈùõËìù" },
                { code: "#BA55D3", name: "‰∏≠ÂÖ∞Ëä±Á¥´" },
                { code: "#D8BFD8", name: "ËìüËâ≤" },
                { code: "#E6E6FA", name: "Ëñ∞Ë°£ËçâÁ¥´" } // Êñ∞Â¢û
            ]
        },
        {
            group: "ÈªëÁôΩ ‚ö´‚ö™",
            colors: [
                { code: "#000000", name: "ÈªëËâ≤" },
                { code: "#FFFFFF", name: "ÁôΩËâ≤" },
                { code: "#C0C0C0", name: "Èì∂Ëâ≤" },
                { code: "#808080", name: "ÁÅ∞Ëâ≤" },
                { code: "#D3D3D3", name: "ÊµÖÁÅ∞" },
                { code: "#A9A9A9", name: "ÊöóÁÅ∞" }
            ]
        },
        {
            group: "ÈÄèÊòéËâ≤ üü§",
            colors: [
                { code: "#00000000", name: "ÈÄèÊòéÈªë" },
                { code: "#FFFFFF00", name: "ÈÄèÊòéÁôΩ" },
                { code: "#00000080", name: "ÂçäÈÄèÊòéÈªë" },
                { code: "#FF000080", name: "ÂçäÈÄèÊòéÁ∫¢" },
                { code: "#00FF0080", name: "ÂçäÈÄèÊòéÁªø" }
            ]
        },
        {
            group: "Ê£ïËâ≤Á≥ª üü§",
            colors: [
                { code: "#A52A2A", name: "Ê£ïËâ≤" },
                { code: "#8B4513", name: "È©¨ÈûçÊ£ï" },
                { code: "#D2691E", name: "Â∑ßÂÖãÂäõÊ£ï" },
                { code: "#CD853F", name: "ÁßòÈ≤ÅÊ£ï" },
                { code: "#DEB887", name: "Èô∂ÂúüÊ£ï" }
            ]
        }
    ];

    // Á¥ØÁßØÈ¢úËâ≤Êò†Â∞ÑÔºå‰∏çÂéªÈô§ÈáçÂ§çÔºåÂêçÁß∞‰ª• " / " ÂàÜÈöî
    const colorMapping = {};
    colorGroups.forEach(group => {
        group.colors.forEach(item => {
            const upperCode = item.code.toUpperCase();
            if (colorMapping[upperCode]) {
                if (!colorMapping[upperCode].includes(item.name)) {
                    colorMapping[upperCode] += " / " + item.name;
                }
            } else {
                colorMapping[upperCode] = item.name;
            }
        });
    });

    // Â∑•ÂÖ∑ÂáΩÊï∞ÔºöÂàõÂª∫ÂÖÉÁ¥†
    function createElement(tag, className, innerHTML) {
        const el = document.createElement(tag);
        if (className) el.className = className;
        if (innerHTML) el.innerHTML = innerHTML;
        return el;
    }

    // Ê∑ªÂä†ÂÖ®Â±ÄÊ†∑Âºè
    function addGlobalStyle(css) {
        const head = document.head || document.getElementsByTagName('head')[0];
        if (!head) return;
        const style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = css;
        head.appendChild(style);
    }

    const globalCSS = `
    :root {
      --bg-overlay: rgba(0,0,0,0.7);
      --modal-bg: #fff;
      --modal-text: #333;
      --input-bg: #fff;
      --input-text: #333;
      --border-color: #ccc;
      --button-bg: #007BFF;
      --button-text: #fff;
    }
    @media (prefers-color-scheme: dark) {
      :root {
        --bg-overlay: rgba(0,0,0,0.85);
        --modal-bg: #1e1e1e;
        --modal-text: #e0e0e0;
        --input-bg: #333;
        --input-text: #e0e0e0;
        --border-color: #555;
        --button-bg: #0A84FF;
        --button-text: #fff;
      }
    }
    .theme-light {
      --bg-overlay: rgba(0,0,0,0.7);
      --modal-bg: #fff;
      --modal-text: #333;
      --input-bg: #fff;
      --input-text: #333;
      --border-color: #ccc;
      --button-bg: #007BFF;
      --button-text: #fff;
    }
    .theme-dark {
      --bg-overlay: rgba(0,0,0,0.85);
      --modal-bg: #1e1e1e;
      --modal-text: #e0e0e0;
      --input-bg: #333;
      --input-text: #e0e0e0;
      --border-color: #555;
      --button-bg: #0A84FF;
      --button-text: #fff;
    }
    .color-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: var(--bg-overlay);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    }
    .color-modal {
        background: var(--modal-bg);
        color: var(--modal-text);
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        padding: 20px;
        max-width: 95%;
        max-height: 95%;
        overflow-y: auto;
        position: relative;
    }
    .color-modal h2 {
        margin-top: 0;
        font-size: 26px;
        text-align: center;
        margin-bottom: 20px;
    }
    .theme-toggle {
        position: absolute;
        top: 10px;
        left: 10px;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        background: var(--button-bg);
        color: var(--button-text);
        cursor: pointer;
        font-size: 14px;
    }
    .close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: var(--modal-text);
        color: var(--modal-bg);
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
        cursor: pointer;
        font-size: 14px;
    }
    .mode-toggle {
        text-align: center;
        margin: 10px 0;
    }
    .mode-toggle label {
        margin: 0 10px;
        font-size: 16px;
        cursor: pointer;
    }
    .input-group {
        margin: 10px 0;
        text-align: center;
    }
    .input-group input {
        width: 60%;
        padding: 8px;
        font-size: 16px;
        background: var(--input-bg);
        color: var(--input-text);
        border: 1px solid var(--border-color);
        border-radius: 5px;
        margin-bottom: 5px;
    }
    .input-group button {
        padding: 8px 16px;
        font-size: 16px;
        margin: 5px 5px;
        border: none;
        border-radius: 5px;
        background: var(--button-bg);
        color: var(--button-text);
        cursor: pointer;
    }
    .color-item {
        display: inline-block;
        width: 120px;
        margin: 10px;
        text-align: center;
        position: relative;
    }
    .color-swatch {
        width: 120px;
        height: 120px;
        line-height: 120px;
        border-radius: 8px;
        color: var(--modal-bg);
        font-weight: bold;
        margin-bottom: 5px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        cursor: pointer;
        border: 1px solid var(--border-color);
    }
    .copy-tooltip {
        pointer-events: none;
        opacity: 0.9;
    }
    .error-message {
        color: red;
        font-size: 14px;
        margin-top: 5px;
        text-align: center;
        animation: fadeIn 0.5s ease-in-out;
    }
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    .search-group {
        margin: 10px 0 20px 0;
        text-align: center;
    }
    .search-group input {
        width: 70%;
        padding: 8px;
        font-size: 16px;
        border: 1px solid var(--border-color);
        border-radius: 5px;
        background: var(--input-bg);
        color: var(--input-text);
    }
    .color-group {
        margin-bottom: 20px;
    }
    .group-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        cursor: pointer;
    }
    .group-title::before {
        content: '‚ñº ';
        font-size: 14px;
    }
    .group-title.collapsed::before {
        content: '‚ñ∂ ';
    }
    .color-list {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }
    .color-list.hidden {
        display: none;
    }
    @media only screen and (orientation: portrait) {
      .preview-container, .content-container {
        text-align: center !important;
      }
      .close-button {
        position: absolute !important;
        top: 10px !important;
        right: 10px !important;
      }
      .theme-toggle {
        position: absolute !important;
        top: 10px !important;
        left: 10px !important;
      }
    }
    `;
    addGlobalStyle(globalCSS);

    // ========== ‰∏ªÈ¢òÊ®°ÂºèÈÄªËæë ==========
    const themeModes = ["auto", "light", "dark"];
    let currentMode = localStorage.getItem('tmColorPreviewTheme') || "auto";

    function updateTheme(modal, mode) {
        modal.classList.remove("theme-light", "theme-dark");
        if (mode === "light") {
            modal.classList.add("theme-light");
        } else if (mode === "dark") {
            modal.classList.add("theme-dark");
        }
    }

    function createThemeToggleButton(modal) {
        const btn = createElement("button", "theme-toggle", "");
        btn.setAttribute("aria-label", "ÂàáÊç¢‰∏ªÈ¢ò");
        function refreshButtonText() {
            btn.innerHTML = "‰∏ªÈ¢ò: " + (currentMode === "auto" ? "Ëá™Âä®" : (currentMode === "light" ? "ÊµÖËâ≤" : "Ê∑±Ëâ≤"));
        }
        refreshButtonText();
        updateTheme(modal, currentMode);

        btn.addEventListener('click', () => {
            const idx = themeModes.indexOf(currentMode);
            currentMode = themeModes[(idx + 1) % themeModes.length];
            refreshButtonText();
            updateTheme(modal, currentMode);
            localStorage.setItem('tmColorPreviewTheme', currentMode);
        });
        modal.appendChild(btn);
    }

    // ========== Èò≤ÊäñÂáΩÊï∞ ==========
    function debounce(func, delay) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), delay);
        };
    }

    // ========== Â§çÂà∂ÊñáÊú¨ÂáΩÊï∞ ==========
    function copyText(text) {
        if (typeof GM_setClipboard !== "undefined") {
            try {
                GM_setClipboard(text);
                return Promise.resolve();
            } catch (err) {
                return Promise.reject(err);
            }
        } else if (navigator.clipboard && navigator.clipboard.writeText) {
            return navigator.clipboard.writeText(text);
        } else {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            try {
                document.execCommand('copy');
            } catch (err) {
                console.error('Â§çÂà∂Â§±Ë¥•', err);
            }
            document.body.removeChild(textarea);
            return Promise.resolve();
        }
    }

    // ========== È¢úËâ≤‰ª£Á†ÅÊ†°È™å‰∏éÊâ©Â±ï ==========
    function normalizeColorCode(code) {
        code = code.trim().toUpperCase();
        if (!code.startsWith("#")) {
            code = "#" + code;
        }
        if (/^#[0-9A-F]{3}$/.test(code)) {
            code = "#" + code.slice(1).split('').map(ch => ch + ch).join('');
        }
        return code;
    }

    function isValidColorCode(code) {
        return /^#[0-9A-F]{6}([0-9A-F]{2})?$/.test(code);
    }

    // ========== Ë∞ÉËØï16ËøõÂà∂È¢úËâ≤È¢ÑËßà‰∏éË∞ÉËØïUI ==========
    function showDebugColorUI() {
        const overlay = createElement('div', 'color-overlay');
        overlay.setAttribute("role", "dialog");
        const modal = createElement('div', 'color-modal');
        overlay.appendChild(modal);

        createThemeToggleButton(modal);

        const closeBtn = createElement('button', 'close-button', 'ÂÖ≥Èó≠');
        closeBtn.setAttribute("aria-label", "ÂÖ≥Èó≠È¢ÑËßàÁ™óÂè£");
        closeBtn.addEventListener('click', () => document.body.removeChild(overlay));
        modal.appendChild(closeBtn);

        const title = createElement('h2', '', '16ËøõÂà∂È¢úËâ≤È¢ÑËßà‰∏éË∞ÉËØï');
        modal.appendChild(title);

        // ===== È¢ÑËßàÊ®°ÂºèÂàáÊç¢ =====
        const modeToggle = createElement('div', 'mode-toggle');
        modeToggle.innerHTML = `
            <label>
                <input type="radio" name="previewMode" value="single" checked> ÂçïËâ≤È¢ÑËßà
            </label>
            <label>
                <input type="radio" name="previewMode" value="dual"> ÂèåËâ≤È¢ÑËßà
            </label>
        `;
        modal.appendChild(modeToggle);

        // ÂÆπÂô®ÔºöÊ†πÊçÆÊ®°ÂºèÊòæÁ§∫‰∏çÂêåÁöÑËæìÂÖ•Âå∫Âüü
        const inputContainer = createElement('div', 'input-container');
        modal.appendChild(inputContainer);

        // ÂçïËâ≤ËæìÂÖ•ÁªÑÔºàÈªòËÆ§ÊòæÁ§∫Ôºâ
        const singleInputGroup = createElement('div', 'input-group');
        const singleInput = document.createElement('input');
        singleInput.type = 'text';
        singleInput.placeholder = '#C7EDCC Êàñ #FFF';
        singleInputGroup.appendChild(singleInput);
        inputContainer.appendChild(singleInputGroup);

        // ÂèåËâ≤ËæìÂÖ•ÁªÑÔºàÂàùÂßãÈöêËóèÔºâ
        const dualInputGroup = createElement('div', 'input-group');
        dualInputGroup.style.display = 'none';
        const dualInput1 = document.createElement('input');
        dualInput1.type = 'text';
        dualInput1.placeholder = '#C7EDCC Êàñ #FFF';
        dualInputGroup.appendChild(dualInput1);
        const dualInput2 = document.createElement('input');
        dualInput2.type = 'text';
        dualInput2.placeholder = '#1E90FF Êàñ #00F';
        dualInputGroup.appendChild(dualInput2);
        inputContainer.appendChild(dualInputGroup);

        // ÁîüÊàêÈ¢ÑËßà„ÄÅÊ∏ÖÁ©∫È¢ÑËßàÊåâÈíÆÂå∫Âüü
        const btnGroup = createElement('div', 'input-group');
        const generateBtn = createElement('button', '', 'ÁîüÊàêÈ¢ÑËßà');
        generateBtn.setAttribute("aria-label", "ÁîüÊàêÈ¢úËâ≤È¢ÑËßà");
        btnGroup.appendChild(generateBtn);
        const clearBtn = createElement('button', '', 'Ê∏ÖÁ©∫È¢ÑËßà');
        clearBtn.setAttribute("aria-label", "Ê∏ÖÁ©∫È¢úËâ≤È¢ÑËßà");
        btnGroup.appendChild(clearBtn);
        modal.appendChild(btnGroup);

        const errorMsg = createElement('div', 'error-message', '');
        errorMsg.setAttribute("aria-live", "assertive");
        modal.appendChild(errorMsg);

        const previewContainer = createElement('div', 'preview-container');
        previewContainer.style.textAlign = 'center';
        modal.appendChild(previewContainer);

        // È¢ÑËßàÊ®°ÂºèÂàáÊç¢‰∫ã‰ª∂
        modeToggle.addEventListener('change', (e) => {
            const mode = document.querySelector('input[name="previewMode"]:checked').value;
            if (mode === 'single') {
                singleInputGroup.style.display = '';
                dualInputGroup.style.display = 'none';
            } else {
                singleInputGroup.style.display = 'none';
                dualInputGroup.style.display = '';
            }
            errorMsg.innerHTML = '';
            previewContainer.innerHTML = '';
        });

        // ÊîØÊåÅËæìÂÖ•Ê°ÜÂõûËΩ¶Ëß¶ÂèëÁîüÊàêÈ¢ÑËßàÔºàÂàÜÂà´ÂØπÂçïËâ≤‰∏éÂèåËâ≤Ôºâ
        singleInput.addEventListener('keydown', (e) => {
            if (e.key === "Enter") {
                generateBtn.click();
            }
        });
        dualInput1.addEventListener('keydown', (e) => {
            if (e.key === "Enter") {
                generateBtn.click();
            }
        });
        dualInput2.addEventListener('keydown', (e) => {
            if (e.key === "Enter") {
                generateBtn.click();
            }
        });

        // ÁîüÊàêÈ¢ÑËßà‰∫ã‰ª∂ÔºåÊ†πÊçÆÂΩìÂâçÈ¢ÑËßàÊ®°ÂºèÂ§ÑÁêÜ
        generateBtn.addEventListener('click', () => {
            previewContainer.innerHTML = '';
            errorMsg.innerHTML = '';
            const mode = document.querySelector('input[name="previewMode"]:checked').value;
            if (mode === 'single') {
                const inputText = singleInput.value.trim();
                if (!inputText) return;
                let code = normalizeColorCode(inputText);
                if (!isValidColorCode(code)) {
                    errorMsg.innerHTML = "Êó†ÊïàÁöÑÈ¢úËâ≤‰ª£Á†Å: " + inputText;
                    return;
                }
                const item = createElement('div', 'color-item');
                const swatch = createElement('div', 'color-swatch', code);
                swatch.style.backgroundColor = code;
                swatch.addEventListener('click', () => {
                    const existingTooltip = item.querySelector('.copy-tooltip');
                    if (existingTooltip) { existingTooltip.remove(); }
                    copyText(code).then(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â∑≤Â§çÂà∂');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(0,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item.appendChild(tooltip);
                        setTimeout(() => { if(item.contains(tooltip)) item.removeChild(tooltip); }, 1000);
                    }).catch(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â§çÂà∂Â§±Ë¥•');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(255,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item.appendChild(tooltip);
                        setTimeout(() => { if(item.contains(tooltip)) item.removeChild(tooltip); }, 1000);
                    });
                });
                item.appendChild(swatch);
                const nameDiv = createElement('div', '', colorMapping[code] || 'Êú™Áü•È¢úËâ≤');
                item.appendChild(nameDiv);
                previewContainer.appendChild(item);
            } else { // dual Ê®°Âºè
                const code1 = normalizeColorCode(dualInput1.value.trim());
                const code2 = normalizeColorCode(dualInput2.value.trim());
                let invalid = [];
                if (!isValidColorCode(code1)) { invalid.push(dualInput1.value.trim()); }
                if (!isValidColorCode(code2)) { invalid.push(dualInput2.value.trim()); }
                if (invalid.length > 0) {
                    errorMsg.innerHTML = "Êó†ÊïàÁöÑÈ¢úËâ≤‰ª£Á†Å: " + invalid.join(', ');
                    return;
                }
                // È¢ÑËßàÈ¢úËâ≤1
                const item1 = createElement('div', 'color-item');
                const swatch1 = createElement('div', 'color-swatch', code1);
                swatch1.style.backgroundColor = code1;
                swatch1.addEventListener('click', () => {
                    const existingTooltip = item1.querySelector('.copy-tooltip');
                    if (existingTooltip) { existingTooltip.remove(); }
                    copyText(code1).then(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â∑≤Â§çÂà∂');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(0,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item1.appendChild(tooltip);
                        setTimeout(() => { if(item1.contains(tooltip)) item1.removeChild(tooltip); }, 1000);
                    }).catch(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â§çÂà∂Â§±Ë¥•');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(255,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item1.appendChild(tooltip);
                        setTimeout(() => { if(item1.contains(tooltip)) item1.removeChild(tooltip); }, 1000);
                    });
                });
                item1.appendChild(swatch1);
                const nameDiv1 = createElement('div', '', colorMapping[code1] || 'Êú™Áü•È¢úËâ≤');
                item1.appendChild(nameDiv1);
                previewContainer.appendChild(item1);

                // È¢ÑËßàÈ¢úËâ≤2
                const item2 = createElement('div', 'color-item');
                const swatch2 = createElement('div', 'color-swatch', code2);
                swatch2.style.backgroundColor = code2;
                swatch2.addEventListener('click', () => {
                    const existingTooltip = item2.querySelector('.copy-tooltip');
                    if (existingTooltip) { existingTooltip.remove(); }
                    copyText(code2).then(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â∑≤Â§çÂà∂');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(0,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item2.appendChild(tooltip);
                        setTimeout(() => { if(item2.contains(tooltip)) item2.removeChild(tooltip); }, 1000);
                    }).catch(() => {
                        const tooltip = createElement('div', 'copy-tooltip', 'Â§çÂà∂Â§±Ë¥•');
                        tooltip.style.position = 'absolute';
                        tooltip.style.backgroundColor = 'rgba(255,0,0,0.6)';
                        tooltip.style.color = '#fff';
                        tooltip.style.padding = '2px 5px';
                        tooltip.style.borderRadius = '3px';
                        tooltip.style.fontSize = '12px';
                        tooltip.style.top = '0';
                        tooltip.style.left = '50%';
                        tooltip.style.transform = 'translateX(-50%)';
                        item2.appendChild(tooltip);
                        setTimeout(() => { if(item2.contains(tooltip)) item2.removeChild(tooltip); }, 1000);
                    });
                });
                item2.appendChild(swatch2);
                const nameDiv2 = createElement('div', '', colorMapping[code2] || 'Êú™Áü•È¢úËâ≤');
                item2.appendChild(nameDiv2);
                previewContainer.appendChild(item2);
            }
        });

        overlay.addEventListener('keydown', (e) => {
            if (e.key === "Escape") { document.body.removeChild(overlay); }
        });
        overlay.tabIndex = 0;
        overlay.focus();
        document.body.appendChild(overlay);
    }

    // ========== 16ËøõÂà∂È¢úËâ≤Â§ßÂÖ®Â±ïÁ§∫UI ==========
    function showColorCollectionUI() {
        const overlay = createElement('div', 'color-overlay');
        overlay.setAttribute("role", "dialog");
        const modal = createElement('div', 'color-modal');
        overlay.appendChild(modal);

        createThemeToggleButton(modal);

        const closeBtn = createElement('button', 'close-button', 'ÂÖ≥Èó≠');
        closeBtn.setAttribute("aria-label", "ÂÖ≥Èó≠È¢úËâ≤Â±ïÁ§∫Á™óÂè£");
        closeBtn.addEventListener('click', () => document.body.removeChild(overlay));
        modal.appendChild(closeBtn);

        const title = createElement('h2', '', '16ËøõÂà∂È¢úËâ≤Â§ßÂÖ®Â±ïÁ§∫');
        modal.appendChild(title);

        const searchGroup = createElement('div', 'search-group');
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = 'ÊêúÁ¥¢È¢úËâ≤Ôºà‰ª£Á†ÅÊàñÂêçÁß∞Ôºâ';
        searchGroup.appendChild(searchInput);
        modal.appendChild(searchGroup);

        const contentContainer = createElement('div', 'content-container');
        modal.appendChild(contentContainer);

        function renderGroups() {
            contentContainer.innerHTML = '';
            colorGroups.forEach(group => {
                const filteredColors = group.colors.filter(item => {
                    const searchTerm = searchInput.value.trim().toLowerCase();
                    if (!searchTerm) return true;
                    if (searchTerm.startsWith('#')) {
                        return item.code.toLowerCase().startsWith(searchTerm);
                    } else if (searchTerm.endsWith('*')) {
                        return item.name.toLowerCase().startsWith(searchTerm.slice(0, -1));
                    } else {
                        return (
                            item.code.toLowerCase().includes(searchTerm) ||
                            item.name.toLowerCase().includes(searchTerm)
                        );
                    }
                });
                if (filteredColors.length === 0) return;

                const groupDiv = createElement('div', 'color-group');
                const groupTitle = createElement('div', 'group-title', group.group);
                groupTitle.addEventListener('click', () => {
                    groupTitle.classList.toggle('collapsed');
                    const colorList = groupDiv.querySelector('.color-list');
                    colorList.classList.toggle('hidden');
                });
                groupDiv.appendChild(groupTitle);

                const colorList = createElement('div', 'color-list');
                filteredColors.forEach(item => {
                    const colorItem = createElement('div', 'color-item');
                    const swatch = createElement('div', 'color-swatch', item.code);
                    swatch.style.backgroundColor = item.code;
                    colorItem.appendChild(swatch);

                    const codeDiv = createElement('div', '', item.code);
                    colorItem.appendChild(codeDiv);

                    const nameDiv = createElement('div', '', item.name);
                    colorItem.appendChild(nameDiv);

                    colorList.appendChild(colorItem);
                });
                groupDiv.appendChild(colorList);

                contentContainer.appendChild(groupDiv);
            });
        }

        searchInput.addEventListener('input', debounce(renderGroups, 300));
        renderGroups();

        overlay.addEventListener('keydown', (e) => {
            if (e.key === "Escape") { document.body.removeChild(overlay); }
        });
        overlay.tabIndex = 0;
        overlay.focus();
        document.body.appendChild(overlay);
    }

    // ========== Ê≥®ÂÜåÊ≤πÁå¥ËèúÂçï ==========
    if (typeof GM_registerMenuCommand !== "undefined") {
        GM_registerMenuCommand("16ËøõÂà∂È¢úËâ≤È¢ÑËßà‰∏éË∞ÉËØï", showDebugColorUI);
        GM_registerMenuCommand("16ËøõÂà∂È¢úËâ≤Â§ßÂÖ®Â±ïÁ§∫", showColorCollectionUI);
    } else {
        console.error("GM_registerMenuCommand ‰∏çÂèØÁî®„ÄÇ");
    }
})();
